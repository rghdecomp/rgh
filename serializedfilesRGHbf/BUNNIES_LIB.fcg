function vector Bunnies_Pointer_Pos_Convert(vector tv_Pointer_Pos)
{
	if(tv_Pointer_Pos.x >= -1.0 && tv_Pointer_Pos.x <= 1.0)
	{
		tv_Pointer_Pos.x = tv_Pointer_Pos.x + 1.0;
		tv_Pointer_Pos.x = tv_Pointer_Pos.x * 0.5;
	}

	if(tv_Pointer_Pos.y >= -1.0 && tv_Pointer_Pos.y <= 1.0)
	{
		tv_Pointer_Pos.y = tv_Pointer_Pos.y + 1.0;
		tv_Pointer_Pos.y = tv_Pointer_Pos.y * 0.5;
	}
	
	return tv_Pointer_Pos;
}

function int Bunnies_Measures_Is_In_Meters()
{
	int ti_Lang;
	int ti_Is_In_Meters = true;
	
	ti_Lang = TXT_LangGet();
	
	switch(ti_Lang)
	{		
		case TXT_Lang_English :
		
			ti_Is_In_Meters = false;
			break;
		
		default :
		
			ti_Is_In_Meters = true;
			break;
	}
	
	return ti_Is_In_Meters;
}

function void Bunnies_UpdateMagmaCursor()
{
	// Gets pointer position
	vector tv_pos = IO_JoystickGetPointer(0);
	tv_pos = Bunnies_Pointer_Pos_Convert(tv_pos);
	ViD_MenuGameCursorMove(0, tv_pos.x, tv_pos.y);

	// Update angle
	int ti_MagmaCursor = 3558176175; // Value generated by magma
	
	float tf_Angle = 0.0;
	// Cursor visible by sensor bar
	if ( IO_JoystickDPDValidGet(0) > 1 )
	{
		vector tv_Horizon = IO_JoystickHorizonGet(0);
		tv_Horizon.z = 0.0;
		
		tf_Angle = - MTH_VecAngle(tv_Horizon, cvector(1.0, 0.0, 0.0), cvector(0.0, 0.0, 1.0))* (180/Cf_Pi);
	}
	else
	{
		// Use accelerometer to compute the angle rotation
		vector tv_accel_cursor	= -IO_JoystickAccelGet(0, 0);
		tv_accel_cursor.z	= 0.0;
		tv_accel_cursor.y = MTH_FloatRound(tv_accel_cursor.y, 0.1);
		tv_accel_cursor.x = MTH_FloatRound(tv_accel_cursor.x, 0.1);
	
		tf_Angle = - MTH_VecAngle(tv_accel_cursor, cvector(0.0, 1.0, 0.0), cvector(0.0, 0.0, -1.0))* (180/Cf_Pi);
	}
	
	// Apply rotation
	MGM_SetFloatProperty(ti_MagmaCursor, MGM_PROPERTY_ROTATION, 0, tf_Angle, MGM_SETTINGMODE_Override	);
	
	// Force visibility
	MGM_SetIntProperty(ti_MagmaCursor, MGM_PROPERTY_VISIBLE, 0, true, MGM_SETTINGMODE_Override);
	MGM_SetIntProperty(ti_MagmaCursor, MGM_PROPERTY_VISIBLE, 0, true, MGM_SETTINGMODE_Override);
	MGM_SetIntProperty(ti_MagmaCursor, MGM_PROPERTY_CURRENT_FRAME_INDEX, 0, 0, MGM_SETTINGMODE_Override);
}

function inline void Bunnies_LanguageSet()
{
//	TXT_LangSet(TXT_Lang_French);
}

//	retourne vrai si l'univers est actif
function inline int UNIV_IsActive()
{
	return @u active_univers;
}

function inline int UNIV_LoadMap_ES_Get()
{
	return @u UNIV_LoadMapES;
}

function inline void UNIV_LoadMap_ES_Set(int ti_LoadMapES)
{
	@u UNIV_LoadMapES = ti_LoadMapES;
}

function inline int UNIV_LoadMap_Flags_Get()
{
	return @u UNIV_LoadMapFlags;	
}


function void Maps_RegisterReset()	
{
	@u MAP_Counter = 0;
	@u MAP_Counter_Displayed = 0;
}

function inline void UNIV_Save_NextInitGlobalSet()
{
	@u i_MustSave = true;
	@u i_GlobalMustBeInNewMap = false;	
}

function inline int UNIV_Save_NextInitGlobalGet()
{
	return @u i_MustSave;
}

function inline void UNIV_Save_GlobalNewInitSet()
{
	@u i_GlobalMustBeInNewMap = true;
}

function inline int UNIV_Save_GlobalNewInitGet()
{

	return @u i_GlobalMustBeInNewMap;
}


// SPECIFIC WIIIII CHANNEL ------------------
function void Maps_Register_WiiChannel()
{
	Maps_RegisterReset();	
	Map_DefinePlus(1, 0xb4101342, -1, "WiiChannel", 1, -1, 0 , -1, Ci_Bink_Play_Auto_Skip | Ci_Bink_Play_All);
	Map_Define(6, 0x2510155c, -1, "Language", 1);
}
// SPECIFIC WIIIII CHANNEL ------------------


// ------------------------------------------
// MAP MANAGEMENT 
// ------------------------------------------
function wstring Maps_GetNameFromID(int _i_ID)
{
	if (_i_ID != -1)
	{
		int ti_i;
		
		for (ti_i = 0; ti_i < 100; ti_i++)
		{
			if (@u MAP[ti_i].m_ID == _i_ID)
				return @u MAP[ti_i].m_Name;
		}
	}
	return "";
}

function void Maps_SetName(int _i_ID, wstring _wstr_Name)
{
	// HACK tant qu'on a pas toutes les ID des noms de map
	if (_wstr_Name != SCR_CO_WStringNull)
	{
		int ti_i;
		for ( ti_i = 0; ti_i < 100; ti_i++)
		{
			if (@u MAP[ti_i].m_ID == _i_ID)
				@u MAP[ti_i].m_Name = _wstr_Name;
		}
	}
}

function wstring Maps_GetNameFromTXD(int _i_TXD_Rank, modifier _mdf_Dial_MapsName)
{
	if (_mdf_Dial_MapsName && _i_TXD_Rank < 100)
	{
		text 	ttxta_MapName[5];
		dialog tdial_MapName = @m(_mdf_Dial_MapsName) DIAL_EntryGetByRank(0, _i_TXD_Rank, -1);   
		@m(_mdf_Dial_MapsName) DIAL_TextListGet(tdial_MapName, &ttxta_MapName[0], 5);
		return TXT_cwstr(ttxta_MapName[0]);
	}
	
	return "";
}


function void Maps_SetAllNamesFromTXD(modifier _mdf_Dial)
{
	// HUBS
	Maps_SetName(MAP_ID_HUB_BALTI_L1, Maps_GetNameFromTXD(MAP_DIAL_ID_HUB_BALTI_L1, _mdf_Dial));
	Maps_SetName(MAP_ID_HUB_BALTI_L2, Maps_GetNameFromTXD(MAP_ID_HUB_BALTI_L2, _mdf_Dial));
	Maps_SetName(MAP_ID_HUB_BALTI_L3_XS, Maps_GetNameFromTXD(MAP_ID_HUB_BALTI_L3_XS, _mdf_Dial));
	
	Maps_SetName(MAP_ID_A1, Maps_GetNameFromTXD(MAP_DIAL_ID_A1, _mdf_Dial));
	Maps_SetName(MAP_ID_A3, Maps_GetNameFromTXD(MAP_DIAL_ID_A3, _mdf_Dial));
	Maps_SetName(MAP_ID_A4, Maps_GetNameFromTXD(MAP_DIAL_ID_A4, _mdf_Dial));
	Maps_SetName(MAP_ID_A7, Maps_GetNameFromTXD(MAP_DIAL_ID_A7, _mdf_Dial));
	Maps_SetName(MAP_ID_IZW, Maps_GetNameFromTXD(MAP_DIAL_ID_IZW, _mdf_Dial));
	
	// DOME 1
	Maps_SetName(MAP_ID_B1, Maps_GetNameFromTXD(MAP_DIAL_ID_B1, _mdf_Dial));
	Maps_SetName(MAP_ID_B2, Maps_GetNameFromTXD(MAP_DIAL_ID_B2, _mdf_Dial));
	Maps_SetName(MAP_ID_B3, Maps_GetNameFromTXD(MAP_DIAL_ID_B3, _mdf_Dial));
	Maps_SetName(MAP_ID_B4, Maps_GetNameFromTXD(MAP_DIAL_ID_B4, _mdf_Dial));
	
	// DOME 2
	Maps_SetName(MAP_ID_C1, Maps_GetNameFromTXD(MAP_DIAL_ID_C1, _mdf_Dial));
	Maps_SetName(MAP_ID_C5, Maps_GetNameFromTXD(MAP_DIAL_ID_C5, _mdf_Dial));
	Maps_SetName(MAP_ID_C2, Maps_GetNameFromTXD(MAP_DIAL_ID_C2, _mdf_Dial));
	Maps_SetName(MAP_ID_B5, Maps_GetNameFromTXD(MAP_DIAL_ID_B5, _mdf_Dial));
	Maps_SetName(MAP_ID_B7, Maps_GetNameFromTXD(MAP_DIAL_ID_B7, _mdf_Dial));
	
	// DOME 3
	Maps_SetName(MAP_ID_D6, Maps_GetNameFromTXD(MAP_DIAL_ID_D6, _mdf_Dial));
	Maps_SetName(MAP_ID_B6, Maps_GetNameFromTXD(MAP_DIAL_ID_B6, _mdf_Dial));
	Maps_SetName(MAP_ID_E4, Maps_GetNameFromTXD(MAP_DIAL_ID_E4, _mdf_Dial));
	Maps_SetName(MAP_ID_C6, Maps_GetNameFromTXD(MAP_DIAL_ID_C6, _mdf_Dial));
	Maps_SetName(MAP_ID_C10, Maps_GetNameFromTXD(MAP_DIAL_ID_C10, _mdf_Dial));
	
	// DOME 4
	Maps_SetName(MAP_ID_D1, Maps_GetNameFromTXD(MAP_DIAL_ID_D1, _mdf_Dial));
	Maps_SetName(MAP_ID_D5, Maps_GetNameFromTXD(MAP_DIAL_ID_D5, _mdf_Dial));
	Maps_SetName(MAP_ID_B9, Maps_GetNameFromTXD(MAP_DIAL_ID_B9, _mdf_Dial));
	Maps_SetName(MAP_ID_B11, Maps_GetNameFromTXD(MAP_DIAL_ID_B11, _mdf_Dial));
	Maps_SetName(MAP_ID_B8, Maps_GetNameFromTXD(MAP_DIAL_ID_B8, _mdf_Dial));
	Maps_SetName(MAP_ID_C7, Maps_GetNameFromTXD(MAP_DIAL_ID_C7, _mdf_Dial));
	
	// DOME 5			
	Maps_SetName(MAP_ID_C4, Maps_GetNameFromTXD(MAP_DIAL_ID_C4, _mdf_Dial));
	Maps_SetName(MAP_ID_E2, Maps_GetNameFromTXD(MAP_DIAL_ID_E2, _mdf_Dial));
	Maps_SetName(MAP_ID_E3, Maps_GetNameFromTXD(MAP_DIAL_ID_E3, _mdf_Dial));
	Maps_SetName(MAP_ID_D4, Maps_GetNameFromTXD(MAP_DIAL_ID_D4, _mdf_Dial));
	Maps_SetName(MAP_ID_C3, Maps_GetNameFromTXD(MAP_DIAL_ID_C3, _mdf_Dial));
	Maps_SetName(MAP_ID_B10, Maps_GetNameFromTXD(MAP_DIAL_ID_B10, _mdf_Dial));
	
	// DOME 6
	Maps_SetName(MAP_ID_E6, Maps_GetNameFromTXD(MAP_DIAL_ID_E6, _mdf_Dial));
	Maps_SetName(MAP_ID_C9, Maps_GetNameFromTXD(MAP_DIAL_ID_C9, _mdf_Dial));
	Maps_SetName(MAP_ID_C11, Maps_GetNameFromTXD(MAP_DIAL_ID_C11, _mdf_Dial));
	Maps_SetName(MAP_ID_C12, Maps_GetNameFromTXD(MAP_DIAL_ID_C12, _mdf_Dial));
}

function void Maps_Register()	// => METTRE LES BONNES CLES DE BINK ET DE MAPS TIME ATTACK POUR CHAQUE MAP !!!!!!!!!!!
{
	Maps_RegisterReset();	

	// 10000 = PAGE 0
	Map_Define(2, 5000, -1, "Mondes", 1);
	Map_Define(3, 0xb4100ea9, -1, "Map in Ze Wiimote ", 1);
	//Map_Define(4  , 0xB4100EA7, -1, "Walkthrough", 1);
	Map_DefinePlus(5  , 0x60001c2c, -1, "Map in Ze Wiimote TRC", 1, -1 , BINK_MiniLoading2 , BINK_NONE , Ci_Bink_Play_Auto_Skip | Ci_Bink_Play_If_None | Ci_Bink_Play_All);
	//---------------------------------------------------------------
	// La ligne suivante declare la map A1 comme demarrage du jeu.
	// Cela pose probleme car ça signifie qu'elle devient la map 
	// par défaut, et donc remplace la map monde. Il faudra faire 
	// en sorte que A1 se lance direct quand on lance le walkthrough
	// mais que la map monde reste la map par defaut. C'est merdique
	// pour l'instant car le menu magma appelle le menu de debug
	// A terme, le menu magma devra directement appeler A1
	//---------------------------------------------------------------
	Map_DefinePlus(4  , 0xB4100EA7, -1, "Walkthrough", 1, C_MAP_PARAMETERS_A1, BINK_MiniLoading2 , BINK_NONE , Ci_Bink_Play_If_None | Ci_Bink_Play_All);

/*
	Map_Define(4, 200, "Playtest Avril", 1);
	Map_Define(5, 300, "Test", 1);
	Map_Define(6, 400, "GameLabs", 1);
	Map_Define(7, 500, "Benchmark XS", 1);
	Map_Define(10, 0xb4100dc9, "Loader", 1);
	Map_Define(11, 0x25100d9f, "AttractMode", 1);
*/
	// 5000 = PAGE 2 ... liste de tous les HUB
	Map_Define(5001  , 5100, -1, "World A - Le Tas", 1);
	Map_Define(5002  , 5150, -1, "World B - Baltimore", 1);
	Map_Define(5003  , 5200, -1, "World C - Aéroport", 1);
	Map_Define(5004  , 5250, -1, "World D - Bayou", 1);
	Map_Define(5005  , 5300, -1, "World E - Parking", 1);

	// HUBS
	Map_DefinePlus(MAP_ID_HUB_BALTI_L1  , 0x2A01F77D, -1, "HUB Baltimore - Layer 1", 1, -1 , BINK_PJ_Only , BINK_NONE , Ci_Bink_Play_If_None | Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_HUB_BALTI_L2  , 0x2A01F77E, -1, "HUB Baltimore - Layer 2", 1, -1 , BINK_PJ_Only , BINK_NONE , Ci_Bink_Play_If_None | Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_HUB_BALTI_L3_XS  , 0x2A01F77F, -1, "HUB Baltimore - Layer 3", 1, -1 , BINK_PJ_Only , BINK_NONE , Ci_Bink_Play_If_None | Ci_Bink_Play_All);

	// 5100 et plus = SOUS-PAGE 2 ... liste de tous les mondes
	Map_DefinePlus(MAP_ID_A1  , 0xb4100e99, 0xb4100e99, "A1 Tas Début", 1, C_MAP_PARAMETERS_A1 , BINK_PJ_Only , BINK_PJ_Only, Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_A3  , 0x08105f24, 0x08105f24, "A3 Tas Tuto SBoost", 1, C_MAP_PARAMETERS_A3 , BINK_Plongeoir , BINK_PJ_Only , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_A4  , 0x08105f25, 0x08105f25, "A4 Tas Tuto JetSki", 1, C_MAP_PARAMETERS_A4 , BINK_Reacteur , BINK_PJ_Only , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_A7  , 0x0920480c, 0x0920480c, "A7_Tas_Final", 1, C_MAP_PARAMETERS_A7 , BINK_Vache , BINK_OutroGame , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_IZW  , 0xb4100ea9, -1, "MAP IZW", 1, -1, BINK_PJ_Only, BINK_PJ_Only , Ci_Bink_Play_All);
	
	// WARNING: Swapped B1 and C1 only for test purpose
	// DOME 1
	Map_DefinePlus(MAP_ID_B1  , 0x2510091d, 0x2510091d, "", 1, C_MAP_PARAMETERS_B1 , BINK_B1 , BINK_Vigie_Egout , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B2  , 0x120068b6, 0x120068b6, "- B2 Entreprise Bénédicte 1", 1, C_MAP_PARAMETERS_B2 , BINK_B2 , BINK_Horloge , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B3  , 0x0a006a4a, 0x0a006a4a, "- B3 Hôpital LitBulle 1", 1, C_MAP_PARAMETERS_B3 , BINK_B3 , BINK_LitBulle , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B4  , 0x0920480b, 0x0920480b, "- B4 Supermarché First Vermi", 1, C_MAP_PARAMETERS_B4 , BINK_B4 , BINK_Plongeoir , Ci_Bink_Play_All);

	// DOME 2
	Map_DefinePlus(MAP_ID_C1  , 0x0920480a, 0x0920480a, "- C1 Aéroport Tour de Contrôle", 1, C_MAP_PARAMETERS_C1 , BINK_C1 , BINK_Vigie_Radar , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_C5  , 0x25100dd3, 0x25100dd3, "- C5 Aéroport Hall Réacteur 2", 1, C_MAP_PARAMETERS_C5 , BINK_C5 , BINK_Reacteur , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_C2  , 0x09006410, 0x09006410, "- C2 Miami Poursuite 1", 1, C_MAP_PARAMETERS_C2 , BINK_C2 , BINK_Vache , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B5  , 0x25100dd2, 0x25100dd2, "- B5 Hôpital LitBulle 2", 1, C_MAP_PARAMETERS_B5 , BINK_B5 , BINK_LitBulle , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B7  , 0x25100dd1, 0x25100dd1, "- B7 Supermarché Kiosque 2", 1, C_MAP_PARAMETERS_B7 , BINK_B7 , BINK_Kiosque , Ci_Bink_Play_All);

	// DOME 3
	Map_DefinePlus(MAP_ID_D6  , 0x561053c2, 0x561053c2, "- D6 Centrale Dynamo", 1, C_MAP_PARAMETERS_D6 , BINK_D6 , BINK_Pile , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B6  , 0x56105516, 0x56105516, "- B6 Entreprise Bénédicte 3", 1, C_MAP_PARAMETERS_B6 , BINK_B6 , BINK_Bureau , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_E4  , 0x51009c87, 0x51009c87, "- E4 Pneu", 1, C_MAP_PARAMETERS_E4 , BINK_E4 , BINK_Pneu , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_C6  , 0x08105f2b, 0x08105f2b, "- C6 Aéroport Bagages 1", 1, C_MAP_PARAMETERS_C6 , BINK_C6 , BINK_Vache , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_C10  , 0x6020db12, 0x6020db12, "- C10 Aéroport Hall Réacteur 1", 1, C_MAP_PARAMETERS_C10 , BINK_C10 , BINK_Reacteur , Ci_Bink_Play_All);

	// DOME 4
	Map_DefinePlus(MAP_ID_D1  , 0x51009c76, 0x51009c76, "- D1 Bayou", 1, C_MAP_PARAMETERS_D1 , BINK_D1 , BINK_Cuve , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_D5  , 0xce10649f, 0xce10649f, "- D5 Usine LitBulle 3", 1, C_MAP_PARAMETERS_D5 , BINK_D5 , BINK_LitBulle , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B9  , 0x0a006a4b, 0x0a006a4b, "- B9 Entreprise Bénédicte 2", 1, C_MAP_PARAMETERS_B9 , BINK_B9 , BINK_Statue , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B11  , 0x120068b5, 0x120068b5, "- B11 Campagne CGG 1", 1, C_MAP_PARAMETERS_B11 , BINK_B11 , BINK_4x4 , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B8  , 0x56105517, 0x56105517, "- B8 Hôpital Sapin", 1, C_MAP_PARAMETERS_B8 , BINK_B8 , BINK_Sapin , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_C7  , 0x25100dd5, 0x25100dd5, "- C7 Miami Poursuite 2", 1, C_MAP_PARAMETERS_C7 , BINK_C7 , BINK_Vache , Ci_Bink_Play_All);
//	Map_DefinePlus(MAP_ID_D3  , 0x0a006a48, 0x0a006a48, "- D3 Canyon Pneu", 1, C_MAP_PARAMETERS_D3 , BINK_NONE , BINK_NONE , Ci_Bink_Play_All);

	// DOME 5			
	Map_DefinePlus(MAP_ID_C4  , 0x06004090, 0x06004090, "- C4 Aéroport Ballons", 1, C_MAP_PARAMETERS_C4 , BINK_C4 , BINK_Piano , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_E2  , 0xce1064a0, 0xce1064a0, "- E2 La Tour Infernale", 1, C_MAP_PARAMETERS_E2 , BINK_E2 , BINK_Vache , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_E3  , 0x6020db15, 0x6020db15, "- E3 Chantier Collecte Gogo 2", 1, C_MAP_PARAMETERS_E3 , BINK_E3 , BINK_Citerne , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_D4  , 0x61100e4d, 0x61100e4d, "- D4 Canyon Pneu 03",1, C_MAP_PARAMETERS_D4 , BINK_D4 , BINK_Pneu , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_C3  , 0x6020db0f, 0x6020db0f, "- C3 Aéroport Hangar Train d'Atterrissage", 1, C_MAP_PARAMETERS_C3 , BINK_C3 , BINK_TrainAtterrissage , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_B10  , 0x0a006a49, 0x0a006a49, "- B10 Entreprise Bénédicte 4", 1, C_MAP_PARAMETERS_B10 , BINK_B10 , BINK_Coffre , Ci_Bink_Play_All);
//	Map_DefinePlus(MAP_ID_C8  , 0x6020db14, 0x6020db14, "- C8 Aéroport Hall Réacteur 3", 1, C_MAP_PARAMETERS_C8 , BINK_NONE , BINK_Reacteur , Ci_Bink_Play_All);

	// DOME 6
	Map_DefinePlus(MAP_ID_E6  , 0x0600408f, 0x0600408f, "- E6 Las Vegas LitBulle 4", 1, C_MAP_PARAMETERS_E6 , BINK_E6 , BINK_LitBulle , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_C9  , 0x08105f2a, 0x08105f2a, "- C9 Aéroport Bagages 2", 1, C_MAP_PARAMETERS_C9 , BINK_C9 , BINK_Vase , Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_C11  , 0x2a01f3a0, 0x2a01f3a0, "- C11 Aéroport Collecte", 1, C_MAP_PARAMETERS_C11 , BINK_C11 , BINK_Avion, Ci_Bink_Play_All);
	Map_DefinePlus(MAP_ID_C12  , 0x08105f29, 0x08105f29, "- C12 Miami Poursuite 4", 1, C_MAP_PARAMETERS_C12 , BINK_C12 , BINK_Vache , Ci_Bink_Play_All);
//	Map_DefinePlus(MAP_ID_D10  , 0x45006542, 0x45006542, "- D10 Cimetière CGG 3", 1, C_MAP_PARAMETERS_D10 , BINK_NONE , BINK_NONE , Ci_Bink_Play_All);

	// 300 = PAGE 3 ... TESTS ...
	Map_Define(301  , 0x5C005624, -1, "Test de sanctions", 1);
	Map_Define(302  , 0x3C002B0a, -1, "Test de Surfaces", 1);
	Map_Define(302  , 0x51003267, -1, "Test du controle", 1);
	Map_Define(303  , 0x4900C395, -1, "Test d'interaction", 1);

	// 400 : PLAYTEST GamesLab
	Map_Define(401  , 0xb4100e99, -1, "A1 Tas Début", 1);
	Map_Define(402  , 0x08105f24, -1, "A3 Tas - Tuto SBoost  ", 1);
	Map_Define(403  , 0x2510091d, -1, "B1 Supermarché Kiosque", 1);
	Map_Define(404  , 0x120068b6, -1, "B2 Entreprise Bénédicte 1", 1);
	Map_Define(405  , 0x0a006a4a, -1, "B3 Hôpital LitBulle 1", 1);
	Map_Define(406  , 0x09200ec8, -1, "B4 Supermarché First Vermi", 1);
	Map_Define(407  , 0x25100dd2, -1, "B5 Hôpital LitBulle 2", 1);
	Map_Define(408  , 0x2a01f3a0, -1, "C1 C1_Aeroport_TourDeControle", 1);
	Map_Define(409  , 0x25100dd3, -1, "C5 C5_Aeroport_Hall_Reacteur_02", 1);
	Map_Define(410  , 0x25100dd5, -1, "C7 Miami - PoursuiteVache 02 ", 1);

	// 500 : BENCHMARK XS
	Map_Define(501  , 0x25100dd5, -1, "C7 Miami Poursuite 2", 1);
	Map_Define(502  , 0x25100dd2, -1, "B5 Hôpital LitBulle 2", 1);	

	// TOUT LES Disable display ALAFIN pour le moment...
	Map_Define(1, 0x25100920, -1, "Map Startup", 1);
	
	Map_Define(6, 0x2510148f, -1, "Language", 1);
	
	Map_DefinePlus(7, 0xdb00d635, -1, "Credits", 1, 0, BINK_MiniLoading2 , BINK_NONE , Ci_Bink_Play_Auto_Skip | Ci_Bink_Play_If_None | Ci_Bink_Play_All);
}

function void Binks_RegisterReset()	
{
	@u BINK_Counter = 0;
}

/*
function void Binks_Register()
{
	Binks_RegisterReset();	

	// Mettre les bonnes clés !!!
	Bink_Define(5101, 0, -1, Ci_Bink_Play_All);		// A1 Tas Début
	Bink_Define(5102 , 0, -1, Ci_Bink_Play_All);		// MAP Monde
	Bink_Define(5103 , 0, -1, Ci_Bink_Play_All);		// MAP Monde FROM IZW
	
	Bink_Define(5206, 3, -1,  Ci_Bink_Play_All);		// C5 Aéroport Hall Réacteur 2
	Bink_Define(5208,  1, -1, Ci_Bink_Play_All);		// C7 Miami Poursuite 2
	
	Bink_Define(5156, 2, -1,  Ci_Bink_Play_All);		// B5 Hôpital LitBulle 2
	Bink_Define(5158, 4, -1, Ci_Bink_Play_All);		// B7 Supermarché Kiosque 2

	// FRED E3 Pas de bink en sortie (prete de temps pour les prez journaliste) avant Bink 0	
	Bink_Define(3 , -1, -1, Ci_Bink_Play_All);			// IZW
}
*/

static public struct ejection_params 
{ 
//		float				f_VerticalAngle; 
	float				f_HorizontalAngle; 
	float				f_StrengthMin; 
	float				f_StrengthMax; 
	object				o_WP_Target; 
	vector				v_LocalOffset;
	int					i_TestMode;
};

static STRUCT_CUSTO;

// Creation d'un nouvel item
// Creation d'un nouvel item
function object BUNNIES_ItemCreate(vector tv_Position, vector tv_Speed, object to_Template)
{
	object to_NewItem;
	modifier tm_Dynamic;
	
	if (to_Template)
	{
		to_NewItem = @o(to_Template) OBJ_Duplicate();
		
		@o(to_NewItem) OBJ_PosSetCut(tv_Position);
		tm_Dynamic = @o(to_NewItem) OBJ_MDFGet(ViD_ENGTYPE_DYNamic, 0);
		if (tm_Dynamic)
		{
			@m(tm_Dynamic) DYN_SpeedSet(tv_Speed);
		}
	
		@o(to_NewItem) OBJ_ControlApplySet(true);
		@o(to_NewItem) OBJ_ControlRenderSet(true);
	}
	else
		to_NewItem = SCR_CO_ObjNull;

	return to_NewItem;
}

//----------------------------------------------------------------------------------------
// 										Display an OBJECT
//----------------------------------------------------------------------------------------
function void DISPLAY_2D_OBJECT(vector tv_pos, object to_val)
{
	int			s_str;
	s_str = STR_Display_W("/F17//jxgyc//CF/", tv_pos, 0);
	STR_InsGaoName(s_str,-1,to_val);
}

//----------------------------------------------------------------------------------------
// 										Integer clamp
//----------------------------------------------------------------------------------------
function void CLAMP_INT(int &ti_val, int ti_min, int ti_max)
{
	if (ti_val < ti_min)	ti_val = ti_min;
	if (ti_val > ti_max)	ti_val = ti_max;
}

//----------------------------------------------------------------------------------------
// 										Float clamp
//----------------------------------------------------------------------------------------
function void CLAMP_FLOAT(float &tf_val, float tf_min, float tf_max)
{
	if (tf_val < tf_min)	tf_val = tf_min;
	if (tf_val > tf_max)	tf_val = tf_max;
}

function object BUNNIES_ItemCreate2(vector tv_Position, vector tv_Speed, object to_Template)
{
	object to_NewItem;
	modifier tm_Dynamic;
	
	to_NewItem = @o(to_Template) OBJ_Duplicate();
	
	@o(to_NewItem) OBJ_PosSetCut(tv_Position);
	tm_Dynamic = @o(to_NewItem) OBJ_MDFGet(ViD_ENGTYPE_DYNamic, 0);
	if (tm_Dynamic)
	{
		@m(tm_Dynamic) DYN_SpeedSet(tv_Speed);
	}

	@o(to_NewItem) OBJ_ControlApplySet(true);
	@o(to_NewItem) OBJ_ControlRenderSet(true);
	@o(to_NewItem) OBJ_CustomBitsSet(Ci_Item_CB_Eject,none);
	
	return to_NewItem;
}


function vector Eject_ForceGet(ejection_params &ps_ep)
{
	vector tv_axis;
	vector tv_origin = OBJ_PosGet() + MTH_VecLocalToGlobal(ps_ep.v_LocalOffset);
	float	tf_Angle, tf_Strength;
	
	if(ps_ep.o_WP_Target)
	{
		tv_axis = MTH_VecNormalize( tv_origin - @o(ps_ep.o_WP_Target) OBJ_PosGet() );
	}
	else
	{
		tv_axis = cvector(0.0,Cf_PiBy4,Cf_PiBy4);
	}
	
	if(ps_ep.i_TestMode)
		tv_axis = MTH_VecRotate(tv_axis,ps_ep.f_HorizontalAngle * Cf_PiBy180,Cv_VerticalVector) * ps_ep.f_StrengthMin;
	else
	{
		tf_Angle = MTH_FloatRand(-ps_ep.f_HorizontalAngle,ps_ep.f_HorizontalAngle);
		tf_Strength = MTH_FloatRand(ps_ep.f_StrengthMin,ps_ep.f_StrengthMax);
		
		tv_axis = MTH_VecRotate(tv_axis, tf_Angle, Cv_VerticalVector) * tf_Strength;
	}

	return tv_axis;
}

function vector Eject_ArrayForceGet(ejection_params *ps_ep, int pi_NbElem)
{
	return Eject_ForceGet(ps_ep[MTH_IntRand(0,pi_NbElem)]);
}

function object Eject_Item(ejection_params *ps_ep, int pi_NbElem, object to_Template)
{
	int ti_rand = MTH_IntRand(0,pi_NbElem);
	vector tv_origin = OBJ_PosGet() + MTH_VecLocalToGlobal(ps_ep[ti_rand].v_LocalOffset);

	if(ps_ep[ti_rand].i_TestMode)
	{
		ps_ep[ti_rand].i_TestMode = false;
		int ti_i;
		ejection_params ts_ejec;
		ts_ejec.i_TestMode = true;
		ts_ejec.f_HorizontalAngle = ps_ep[ti_rand].f_HorizontalAngle;
		ts_ejec.o_WP_Target = ps_ep[ti_rand].o_WP_Target;
		ts_ejec.v_LocalOffset = ps_ep[ti_rand].v_LocalOffset;
		for(ti_i=0; ti_i<11;ti_i++)
		{
			ts_ejec.f_HorizontalAngle = (ps_ep[ti_rand].f_HorizontalAngle)*((ti_i - 5.0)*0.2);
			ts_ejec.f_StrengthMin = ps_ep[ti_rand].f_StrengthMin;
			BUNNIES_ItemCreate2(tv_origin, Eject_ForceGet(ts_ejec), to_Template);

			ts_ejec.f_StrengthMin = ps_ep[ti_rand].f_StrengthMax;
			BUNNIES_ItemCreate2(tv_origin, Eject_ForceGet(ts_ejec), to_Template);
		}
		ps_ep[ti_rand].i_TestMode = false;
	}
	
	return BUNNIES_ItemCreate2(tv_origin, Eject_ForceGet(ps_ep[ti_rand]), to_Template);
}


function void DBG_CurveDisplay(curve pc_dist,float pf_dist, curve pc_angle,float pf_angle,int pi_nbvec,float pf_threshold)
{
	int ti_i,ti_j;
	float tf_diststep;
	float tf_dist;
	vector tv_pos;
	vector tv_sight = cvector(0.0,1.0,0.0);
	float tf_offs;
	int		ti_offset;
	tf_diststep = pf_dist * 2.4 / cfloat( pi_nbvec);
	for(ti_i=0;ti_i<pi_nbvec;ti_i++)
	{
		tv_pos.x =(ti_i - cint(cfloat( pi_nbvec) / 2.0)) * tf_diststep;
		if(ti_i%2)
			tf_offs = tf_diststep * 0.25;
		else
			tf_offs = -tf_diststep * 0.25;

		for(ti_j=1;ti_j<pi_nbvec+1;ti_j++)
		{
			tv_pos.y =((ti_j - cint(cfloat( pi_nbvec) / 2.0)) * tf_diststep) + tf_offs;
			tv_pos.z = 0.0;
			tf_dist = MTH_VecNorm(tv_pos);
			if(tf_dist != 0.0)
				tv_pos.z = MTH_FloatCurve(pc_angle, (1.0 - MTH_VecDotProduct(tv_sight,tv_pos/tf_dist)) / (1.0 - pf_angle));
			else
				tv_pos.z = 1.0;
			tv_pos.z *= MTH_FloatCurve(pc_dist, tf_dist / pf_dist);
			if(tv_pos.z>pf_threshold)
			{
				ti_offset = MTH_FloatTrunc(255 * tv_pos.z,1.0);
				DBG_RenderSphere(MTH_VecLocalToGlobal(tv_pos) + OBJ_PosGet(),tf_diststep * 0.7,
									color_rouge + (0 + (ti_offset<<8)));
			}
		}
	}
//	DBG_Breakpoint();
}

// ENREGISTRE UNE CALLBACK DE WIND
function int CB_Wind_Register(modifier tmdf_target, signal ts_callback)
{
#ifndef _FINAL_
	DBG_Assert(tmdf_target, "[CB_Wind_Register failure] Modifier is null");
#endif
	return @m(tmdf_target) SCR_CBAdd(SCR_CCB_Wind, ts_callback);
}

// ANNULE UNE CALLBACK D ACTIVATION
function void CB_Wind_Unregister(modifier tmdf_target, int ti_id)
{
#ifndef _FINAL_
	DBG_Assert(tmdf_target, "[CB_Wind_Unregister failure] Modifier is null");
#endif
	@m(tmdf_target) SCR_CBDel(ti_id);
}

// APPELLE UNE CALLBACK DE WIND
function export void CB_Wind_Send(modifier tmdf_target, object to_sender, int ti_type, 
										vector tv_pos, vector tv_dir, float tf_force, int ti_forcetype)
{
	stock stk_params;
	
#ifndef _FINAL_
	DBG_Assert(tmdf_target, "[CB_Wind_Send failure] Modifier is null");
#endif

	CB_Wind_Sender(stk_params) = to_sender;
	CB_Wind_Type(stk_params) = ti_type;
	CB_Wind_Origin(stk_params) = tv_pos;
	CB_Wind_Direction(stk_params) = tv_dir;
	CB_Wind_Force(stk_params) = tf_force;
	CB_Wind_ForceType(stk_params) = ti_forcetype;
	CB_Wind_Target(stk_params) = tmdf_target;
	
	SCR_CBCall(tmdf_target, SCR_CCB_Wind, stk_params);
}


// APPELLE UNE CALLBACK DE TRC
function export void CB_TRC_Send(modifier _mdf_target, int _i_ErrorID)
{
	stock stk_params;
	stk_params.i32_1 = _i_ErrorID;
	stk_params.i32_2 = 0;
	SCR_CBCall(_mdf_target, SCR_CCB_TRC, stk_params);
}

function export void CB_TRC_SendWithParam(modifier _mdf_target, int _i_ErrorID, int _i_ErrorParam)
{
	stock stk_params;
	stk_params.i32_1 = _i_ErrorID;
	stk_params.i32_2 = _i_ErrorParam;
	SCR_CBCall(_mdf_target, SCR_CCB_TRC, stk_params);
}




// DATA SET
function int SCR_AssertDataSetIntGet(int ti_DataSetId, string ts_VariableName, int ti_Rank)
{
	int ti_Error;
	int ti_Value;
	
	ti_Value = SCR_DataSetIntGet(ti_DataSetId, ts_VariableName, ti_Rank, ti_Error);	
	DBG_Assert(!ti_Error, "[SCR_DataSetIntGet] Variable cannot be found.");
	return ti_Value;
}

function float SCR_AssertDataSetFloatGet(int ti_DataSetId, string ts_VariableName, int ti_Rank)
{
	int ti_Error;
	float tf_Value;
	
	tf_Value = SCR_DataSetFloatGet(ti_DataSetId, ts_VariableName, ti_Rank, ti_Error);	
	DBG_Assert(!ti_Error, "[SCR_DataSetFloatGet] Variable cannot be found.");
	return tf_Value;
}

function vector SCR_AssertDataSetVectorGet(int ti_DataSetId, string ts_VariableName, int ti_Rank)
{
	int ti_Error;
	vector tv_Value;
	
	tv_Value = SCR_DataSetVectorGet(ti_DataSetId, ts_VariableName, ti_Rank, ti_Error);	
	DBG_Assert(!ti_Error, "[SCR_DataSetVectorGet] Variable cannot be found.");
	return tv_Value;
}

function curve SCR_AssertDataSetCurveGet(int ti_DataSetId, string ts_VariableName, int ti_Rank)
{
	int ti_Error;
	curve tc_Value;
	
	tc_Value = SCR_DataSetCurveGet(ti_DataSetId, ts_VariableName, ti_Rank, ti_Error);	
	DBG_Assert(!ti_Error, "[SCR_DataSetCurveGet] Variable cannot be found.");
	return tc_Value;
}


function void BUNNIES_CopyStruct(s_custo &custoSource, s_custo &custoDest)
{
		custoDest.eye_R_alpha = custoSource.eye_R_alpha;
		custoDest.eye_R_delta = custoSource.eye_R_delta;
		custoDest.eye_R_size = custoSource.eye_R_size;
		custoDest.eye_R_init_pos = custoSource.eye_R_init_pos;
		custoDest.eye_L_alpha = custoSource.eye_L_alpha;
		custoDest.eye_L_delta = custoSource.eye_L_delta;
		custoDest.eye_L_size = custoSource.eye_L_size;
		custoDest.eye_L_init_pos = custoSource.eye_L_init_pos;
//		custoDest.hair_type = custoSource.hair_type;
		custoDest.ear_R_alpha = custoSource.ear_R_alpha;
		custoDest.ear_R_delta = custoSource.ear_R_delta;
		custoDest.ear_R_size = custoSource.ear_R_size;
		custoDest.ear_R_init_pos = custoSource.ear_R_init_pos; 
		custoDest.eye_R_neutral_pos = custoSource.eye_R_neutral_pos; 
		custoDest.ear_R_init_sight = custoSource.ear_R_init_sight;
		custoDest.ear_L_alpha =custoSource.ear_L_alpha;
		custoDest.ear_L_delta = custoSource.ear_L_delta;
		custoDest.ear_L_size =  custoSource.ear_L_size;
		custoDest.ear_L_init_pos =  custoSource.ear_L_init_pos;
		custoDest.ear_R_init_pos = custoSource.ear_R_init_pos; 
		custoDest.ear_L_init_sight = custoSource.ear_L_init_sight;
		custoDest.eye_L_neutral_pos = custoSource.eye_L_neutral_pos;
		custoDest.head_morph =  custoSource.head_morph;
		custoDest.poulpe_pos = custoSource.poulpe_pos;
		custoDest.num_coiffure = custoSource.num_coiffure;
		custoDest.i_fig_R_Eye_Sight = custoSource.i_fig_R_Eye_Sight;
		custoDest.i_fig_L_Eye_Paupiere = custoSource.i_fig_L_Eye_Paupiere;
		custoDest.i_fig_L_Eye_Sight = custoSource.i_fig_L_Eye_Sight;
		custoDest.i_fig_R_Eye_Paupiere = custoSource.i_fig_R_Eye_Paupiere;
		custoDest.i_fig_Bouche = custoSource.i_fig_Bouche;
		custoDest.i_fig_Pose = custoSource.i_fig_Pose;
		custoDest.i_comeFromSlot = custoSource.i_comeFromSlot;

		
		custoDest.i_jpeg_Id = 	 custoSource.i_jpeg_Id;
}

function void BUNNIES_CopyCustoStructAndJPG(int ti_struct_source, int ti_struct_dest, int ti_tex = -1)
{
	int ti_error,ti_error2 ;
	if (ti_struct_source != ti_struct_dest)
	{
		if (ti_struct_source < 3 && ti_struct_dest < 3)
		{
			BUNNIES_CopyStruct( @u s_CustoStructure[ti_struct_source],@u s_CustoStructure[ti_struct_dest]);
//			@u s_CustoStructure[ti_struct_dest]  = @u s_CustoStructure[ti_struct_source]; 
			FBUF_Copy(@u buf_CustoJpeg[ti_struct_dest], @u buf_CustoJpeg[ti_struct_source]);
		}
		else if (ti_struct_source == 3)
		{
			BUNNIES_CopyStruct( @u s_CustoFigurine, @u s_CustoStructure[ti_struct_dest]);
//			@u s_CustoStructure[ti_struct_dest]  = @u s_CustoFigurine; 
			FBUF_Copy(@u buf_CustoJpeg[ti_struct_dest], @u buf_FigurineJpeg);
//			JPG_Begin(512,512);
//			ti_error = JPG_BufferToTexture(@u buf_FigurineJpeg,ti_tex);
//			JPG_End();
//			JPG_Begin(512, 512);
//			ti_error2 = JPG_TextureToBuffer(ti_tex,@u buf_CustoJpeg[ti_struct_dest] );
//			JPG_End();

		}
		else if (ti_struct_dest == 3)
		{
			BUNNIES_CopyStruct(@u s_CustoStructure[ti_struct_source],@u s_CustoFigurine);
//			@u s_CustoFigurine = @u s_CustoStructure[ti_struct_source]; 
			
			FBUF_Copy(@u buf_FigurineJpeg, @u buf_CustoJpeg[ti_struct_source]);

//			JPG_Begin(512,512);
//			if (BUF_SizeGet(@u buf_CustoJpeg[ti_struct_source]) != 0 )
//				ti_error = JPG_BufferToTexture(@u buf_CustoJpeg[ti_struct_source],0xdb00b060);
//			JPG_End();
//			JPG_Begin(512, 512);
//			ti_error2 = JPG_TextureToBuffer(0xdb00b060,@u buf_FigurineJpeg );
//			JPG_End();
		}
	}
//	int ti_Str1 = STR_Display_W("E1: ",cvector( 0.02, 0.5, 0.0),2.0);
//				STR_InsInt(ti_Str1, -1, ti_error ); 
//				
//	int ti_Str2 = STR_Display_W("E2: ",cvector( 0.02, 0.65, 0.0),2.0);
//		STR_InsInt(ti_Str2, -1, ti_error2 ); 

}




function wstring GiveMeTheName( int i_Key)
{
	if (i_Key == -1)
		return SCR_string2wstring("");
	
	return (@u MAP[Map_SearchByID(i_Key)].m_Name);		
}

function int BUNNIES_EvalTxtIdGet(int i_XSCount)
{
	if (i_XSCount >= Ci_SCORE_S)
		return 0x590031ED;
	else if (i_XSCount >= Ci_SCORE_A)
		return 0x590031EC;
	else if (i_XSCount >= Ci_SCORE_B)
		return 0x590031EB;
	else
		return 0x59003177;
}

function inline int SaveSlotCurrentGet()
{
	return (@u i_SaveSlotCurrentID);
}

function inline wstring SaveSlotCurrentNameGet()
{
	return (@u ws_SaveSlotCurrentName);
}

function inline void SaveSlotCurrentSet( int ti_slot)
{
	@u i_SaveSlotCurrentID = ti_slot;
	@u ws_SaveSlotCurrentName = SAV_GetSlotNameW(ti_slot);
}

function inline int NETWORK_DisableGet()
{
	return @u i_NETWORK_Disable;
}

function inline void NETWORK_DisableSet( int ti_flag)
{
	@u i_NETWORK_Disable = ti_flag;
}

function inline int SaveSlotCanCreate()
{
	return @u i_CanCreateSlot;
}

function inline void SaveSlotCreate()
{
	@u i_CanCreateSlot = true;
}

function void UNIV_Init()
{
	int		ti_i;
	
	// ====================================================
	// On force l'initialisation des variables sauvegardées
	// ====================================================
	for (ti_i = 0 ; ti_i < 100 ; ti_i++)
	{
		@u MAP_SAVED[ti_i].m_NbXS = 0;
		@u MAP_SAVED[ti_i].m_Reward = 0;
		@u MAP_SAVED[ti_i].m_timeAttack = 0.0;
		@u MAP_SAVED[ti_i].m_NbXS_TimeAttack = 0;
		@u MAP_SAVED[ti_i].m_finished = 0;
	}
	
	@u i_HP_PJ_Max = 3;
	@u i_DeblocagePowerUp = 3;
	@u i_collecte_StackToTheMoon = 0;
	@u i_universeCurrentDome = 0;
	
	for (ti_i = 0 ; ti_i < C_HUB_NB_DOMES ; ti_i++)
		@u i_universeValidatedDomes[ti_i] = 0;
	
	@u i_universeWantedDome = -1;
	
	for (ti_i = 0 ; ti_i < Ci_UnlockableRewards ; ti_i++)
		@u i_UsedRewards[ti_i] = 0;
	
	for (ti_i = 0 ; ti_i < 3 ; ti_i++)
		@u ai_votedPodium[ti_i] = 0;
	
	@u i_tutorials_profil_flags = 0;
	@u i_tutorials_session_flags = 0;
	@u i_DisplaySubTitle = false;

	// TODO ???
//	private save(0) s_custo	s_CustoStructure[3];	//MUST BE save(0,1)
//	private save(0) fixedbuffer	buf_CustoJpeg[3];
	// ====================================================
	
	@u active_univers = true;
	
	@u PATH_LIB_current_client_ID = 0;
	@u PATH_LIB_new_client_ID = 0;
	
	@u BINK_Counter = 0;
	
	#ifdef _WiiChannel_
		Maps_Register_WiiChannel();
	#else
		Maps_Register();
	#endif
	
	Game_MissionInit();
	
	@u i_izw_game_shaker_record	= 10;
	@u i_izw_game_simon_record	= 5;
	@u i_izw_game_mmaker_record	= 0;

	for (ti_i = 0; ti_i < 3; ti_i++)
	{
	//	BUNNIES_CustomisationDefaultSet(ti_i,s_CustoStructure[ti_i],none);
	//	BUNNIES_CustomisationDefaultSet(s_CustoStructure[ti_i], SCR_ObjMe());
	//	FBUF_Init(buf_CustoJpeg[ti_i], 150 * 1024);
		@u s_CustoStructure[ti_i].ear_L_alpha = 0;
		@u s_CustoStructure[ti_i].ear_L_delta = 0;
		@u s_CustoStructure[ti_i].ear_R_alpha = 0;
		@u s_CustoStructure[ti_i].ear_R_delta = 0;

		@u s_CustoStructure[ti_i].eye_L_alpha = 0;
		@u s_CustoStructure[ti_i].eye_L_delta = 0;
		@u s_CustoStructure[ti_i].eye_R_alpha = 0;
		@u s_CustoStructure[ti_i].eye_R_delta = 0;
		
		@u s_CustoStructure[ti_i].num_coiffure = 0;
		
		FBUF_Reset(@u buf_CustoJpeg[ti_i]);
	}
	
	for (ti_i = 0; ti_i < Ci_UnlockableRewards; ti_i++)
	{
		@u i_UsedRewards[ti_i] = false;
	}
	
	//FBUF_Init(buf_FigurineJpeg, 150 * 1024);
	//FBUF_Init(buf_MusicLoops, 25 * 1024);
}

function inline void JoysitickEnableSet( int ti_joy, int ti_active)
{
	@u i_JoyEnable[ 0] = ti_active;
	IO_JoystickStickEnable( 0,0,ti_active);
}

function inline int JoysitickEnableGet( int ti_joy)
{
	return @u i_JoyEnable[ ti_joy];
}